// Generated by Xata Codegen 0.30.0. Please do not edit.
import { buildClient } from "@xata.io/client";
import type {
  BaseClientOptions,
  SchemaInference,
  XataRecord,
} from "@xata.io/client";

const tables = [
  {
    name: "game",
    columns: [
      { name: "turn", type: "int", defaultValue: "0" },
      { name: "progress", type: "float", defaultValue: "0" },
      { name: "starting_country", type: "link", link: { table: "country" } },
      { name: "company", type: "link", link: { table: "company" } },
      { name: "world", type: "link", link: { table: "world" } },
      { name: "score_factor", type: "float", defaultValue: "1.01" },
      { name: "difficulty", type: "text", defaultValue: "EASY" },
    ],
  },
  {
    name: "country",
    columns: [
      { name: "name", type: "string" },
      { name: "gdp", type: "float" },
    ],
    revLinks: [
      { column: "starting_country", table: "company" },
      { column: "starting_country", table: "game" },
    ],
  },
  {
    name: "company",
    columns: [
      { name: "name", type: "string" },
      { name: "starting_country", type: "link", link: { table: "country" } },
      { name: "company_type", type: "string", defaultValue: "manufacturing" },
      {
        name: "company_fundamentals",
        type: "link",
        link: { table: "company_fundamentals" },
      },
    ],
    revLinks: [
      { column: "company", table: "game" },
      { column: "company", table: "action" },
    ],
  },
  {
    name: "action",
    columns: [
      { name: "company", type: "link", link: { table: "company" } },
      { name: "data", type: "json" },
      { name: "type", type: "string", notNull: true, defaultValue: "invest" },
    ],
  },
  {
    name: "environment",
    columns: [
      { name: "celsius_increase", type: "float", defaultValue: "0" },
      { name: "deforestation", type: "float", defaultValue: "100" },
      { name: "ocean_biodiversity", type: "float", defaultValue: "100" },
      { name: "land_biodiversity", type: "float", defaultValue: "100" },
      { name: "sea_level_rise", type: "float", defaultValue: "0" },
      { name: "ozone", type: "float", defaultValue: "100" },
      { name: "microplastics", type: "int", defaultValue: "0" },
      { name: "oil_spills", type: "multiple" },
      { name: "natural_disasters", type: "multiple" },
    ],
    revLinks: [{ column: "environment", table: "world" }],
  },
  {
    name: "world",
    columns: [
      { name: "environment", type: "link", link: { table: "environment" } },
      { name: "economy", type: "link", link: { table: "economy" } },
    ],
    revLinks: [{ column: "world", table: "game" }],
  },
  {
    name: "economy",
    columns: [
      { name: "s_and_p", type: "int", defaultValue: "1000" },
      { name: "ftse", type: "int", defaultValue: "1000" },
      { name: "dow", type: "int", defaultValue: "1000" },
      { name: "dax", type: "int", defaultValue: "1000" },
      { name: "nasdaq", type: "int", defaultValue: "1000" },
      { name: "bitcoin", type: "int", defaultValue: "10000" },
      { name: "ethereum", type: "int", defaultValue: "1000" },
      { name: "usd_eur", type: "float", defaultValue: "1.0" },
      { name: "gold", type: "float", defaultValue: "100" },
      { name: "silver", type: "float", defaultValue: "50.0" },
      { name: "gdp", type: "float", defaultValue: "1" },
      { name: "inflation", type: "float", defaultValue: "2" },
      { name: "gbp_usd", type: "float", defaultValue: "1.0" },
      { name: "gbp_eur", type: "float", defaultValue: "1.0" },
    ],
    revLinks: [{ column: "economy", table: "world" }],
  },
  {
    name: "company_fundamentals",
    columns: [
      { name: "domestic_influence", type: "float", defaultValue: "0.0" },
      { name: "foreign_influence", type: "float", defaultValue: "0.0" },
      { name: "technology", type: "json", defaultValue: "[]" },
      { name: "acquisitions", type: "json", defaultValue: "[]" },
      { name: "stock_price", type: "float", defaultValue: "0.0" },
      { name: "shares_outstanding", type: "int", defaultValue: "0" },
      { name: "net_profit", type: "float", defaultValue: "0" },
      { name: "revenue", type: "float", defaultValue: "0" },
      { name: "expenses", type: "float", defaultValue: "0.0" },
      { name: "cash", type: "float", defaultValue: "0.0" },
      { name: "debt", type: "float", defaultValue: "0.0" },
      { name: "assets", type: "float", defaultValue: "0.0" },
      { name: "liabilities", type: "float", defaultValue: "0.0" },
      { name: "company_size", type: "int", defaultValue: "1" },
    ],
    revLinks: [{ column: "company_fundamentals", table: "company" }],
  },
] as const;

export type SchemaTables = typeof tables;
export type InferredTypes = SchemaInference<SchemaTables>;

export type Game = InferredTypes["game"];
export type GameRecord = Game & XataRecord;

export type Country = InferredTypes["country"];
export type CountryRecord = Country & XataRecord;

export type Company = InferredTypes["company"];
export type CompanyRecord = Company & XataRecord;

export type Action = InferredTypes["action"];
export type ActionRecord = Action & XataRecord;

export type Environment = InferredTypes["environment"];
export type EnvironmentRecord = Environment & XataRecord;

export type World = InferredTypes["world"];
export type WorldRecord = World & XataRecord;

export type Economy = InferredTypes["economy"];
export type EconomyRecord = Economy & XataRecord;

export type CompanyFundamentals = InferredTypes["company_fundamentals"];
export type CompanyFundamentalsRecord = CompanyFundamentals & XataRecord;

export type DatabaseSchema = {
  game: GameRecord;
  country: CountryRecord;
  company: CompanyRecord;
  action: ActionRecord;
  environment: EnvironmentRecord;
  world: WorldRecord;
  economy: EconomyRecord;
  company_fundamentals: CompanyFundamentalsRecord;
};

const DatabaseClient = buildClient();

const defaultOptions = {
  databaseURL:
    "https://Jack-McGregor-s-workspace-bt62hk.eu-central-1.xata.sh/db/neoliberal-game",
};

export class XataClient extends DatabaseClient<DatabaseSchema> {
  constructor(options?: BaseClientOptions) {
    super({ ...defaultOptions, ...options }, tables);
  }
}

let instance: XataClient | undefined = undefined;

export const getXataClient = () => {
  if (instance) return instance;

  instance = new XataClient();
  return instance;
};
